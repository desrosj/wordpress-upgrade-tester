name: Upgrade Tests

on:
  push:
    branches:
      - one-workflow-all-update-testing
    # Always test the workflow after it's updated.
    paths:
      - '.github/workflows/upgrade-testing.yml'
      - '.github/workflows/upgrade-testing-run.yml'
  pull_request:
    paths:
      - '.github/workflows/upgrade-testing.yml'
      - '.github/workflows/upgrade-testing-run.yml'
  workflow_dispatch:
    inputs:
      new-version:
        description: 'The version to test updating to.'
        type: string

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

# Disable permissions for all available scopes by default.
# Any needed permissions should be configured at the job level.
permissions: {}

jobs:
  #
  # Spawns upgrade testing for WordPress 6.x versions with MySQL.
  #
  upgrade-tests-wp-6x-mysql:
    name: ${{ matrix.wp }} to ${{ inputs.new_version && inputs.new_version || 'latest' }}
    uses: desrosj/wordpress-upgrade-tester/.github/workflows/upgrade-testing-run.yml@one-workflow-all-update-testing
    if: ${{ false }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ]
        php: [ '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2' ]
        db-type: [ 'mysql' ]
        db-version: [ '5.7', '8.0' ]
        wp: [ '6.0', '6.1', '6.2' ]
        multisite: [ false, true ]
    with:
      os: ${{ matrix.os }}
      php: ${{ matrix.php }}
      db-type: ${{ matrix.db-type }}
      db-version: ${{ matrix.db-version }}
      wp: ${{ matrix.wp }}
      new-version: ${{ inputs.new_version && inputs.new_version || '' }}
      multisite: ${{ matrix.multisite }}

  #
  # Spawns upgrade testing for WordPress 6.x versions with mariadb.
  #
  upgrade-tests-wp-6x-mariadb:
    name: ${{ matrix.wp }} to ${{ inputs.new_version && inputs.new_version || 'latest' }}
    uses: desrosj/wordpress-upgrade-tester/.github/workflows/upgrade-testing-run.yml@one-workflow-all-update-testing
    if: ${{ github.repository == 'WordPress/wordpress-develop' || github.event_name == 'pull_request' }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ]
        php: [ '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2' ]
        db-type: [ 'mariadb' ]
        db-version: [ '10.4', '10.6', '10.11', '11.0' ]
        wp: [ '6.0', '6.1', '6.2' ]
        multisite: [ false, true ]
    with:
      os: ${{ matrix.os }}
      php: ${{ matrix.php }}
      db-type: ${{ matrix.db-type }}
      db-version: ${{ matrix.db-version }}
      wp: ${{ matrix.wp }}
      new-version: ${{ inputs.new_version && inputs.new_version || '' }}
      multisite: ${{ matrix.multisite }}

  #
  # Spawns upgrade testing for WordPress 5.x versions on PHP 7.x with MySQL.
  #
  upgrade-tests-wp-5x-php-7x-mysql:
    name: ${{ matrix.wp }} to ${{ inputs.new_version && inputs.new_version || 'latest' }}
    uses: desrosj/wordpress-upgrade-tester/.github/workflows/upgrade-testing-run.yml@one-workflow-all-update-testing
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ]
        php: [ '7.0', '7.1', '7.2', '7.3', '7.4' ]
        db-type: [ 'mysql' ]
        db-version: [ '5.7', '8.0' ]
        wp: [ '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9' ]
        multisite: [ false, true ]
    with:
      os: ${{ matrix.os }}
      php: ${{ matrix.php }}
      db-type: ${{ matrix.db-type }}
      db-version: ${{ matrix.db-version }}
      wp: ${{ matrix.wp }}
      new-version: ${{ inputs.new_version && inputs.new_version || '' }}
      multisite: ${{ matrix.multisite }}

  #
  # Spawns upgrade testing for WordPress 5.x versions on PHP 8.x with MySQL.
  #
  # WordPress 5.0-5.2 are excluded from PHP 8+ testing because of the following fatal errors:
  # - Use of __autoload().
  # - array/string offset with curly braces.
  #
  upgrade-tests-wp-5x-php-8x-mysql:
    name: ${{ matrix.wp }} to ${{ inputs.new_version && inputs.new_version || 'latest' }}
    uses: desrosj/wordpress-upgrade-tester/.github/workflows/upgrade-testing-run.yml@one-workflow-all-update-testing
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ]
        php: [ '8.0', '8.1', '8.2' ]
        db-type: [ 'mysql' ]
        db-version: [ '5.7', '8.0' ]
        wp: [ '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9' ]
        multisite: [ false, true ]
    with:
      os: ${{ matrix.os }}
      php: ${{ matrix.php }}
      db-type: ${{ matrix.db-type }}
      db-version: ${{ matrix.db-version }}
      wp: ${{ matrix.wp }}
      new-version: ${{ inputs.new_version && inputs.new_version || '' }}
      multisite: ${{ matrix.multisite }}

  #
  # Spawns upgrade testing for WordPress 4.x versions on PHP 7.x with MySQL.
  #
  upgrade-tests-wp-4x-php-7x-mysql:
    name: ${{ matrix.wp }} to ${{ inputs.new_version && inputs.new_version || 'latest' }}
    uses: desrosj/wordpress-upgrade-tester/.github/workflows/upgrade-testing-run.yml@one-workflow-all-update-testing
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ]
        php: [ '7.0', '7.1', '7.2', '7.3', '7.4' ]
        db-type: [ 'mysql' ]
        db-version: [ '5.7', '8.0' ]
        wp: [ '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9' ]
        multisite: [ false, true ]
    with:
      os: ${{ matrix.os }}
      php: ${{ matrix.php }}
      db-type: ${{ matrix.db-type }}
      db-version: ${{ matrix.db-version }}
      wp: ${{ matrix.wp }}
      new-version: ${{ inputs.new_version && inputs.new_version || '' }}
      multisite: ${{ matrix.multisite }}

  #
  # Spawns upgrade testing for WordPress 4.x versions on PHP 8.x with MySQL.
  #
  # WordPress 4.6-4.9 are excluded from PHP 8+ testing because of the following fatal errors:
  # - Use of __autoload().
  # - array/string offset with curly braces.
  #
  upgrade-tests-wp-4x-php-8x-mysql:
    name: ${{ matrix.wp }} to ${{ inputs.new_version && inputs.new_version || 'latest' }}
    uses: desrosj/wordpress-upgrade-tester/.github/workflows/upgrade-testing-run.yml@one-workflow-all-update-testing
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ]
        php: [ '8.0', '8.1', '8.2' ]
        db-type: [ 'mysql' ]
        db-version: [ '5.7', '8.0' ]
        wp: [ '4.1', '4.2', '4.3', '4.4', '4.5' ]
        multisite: [ false, true ]
    with:
      os: ${{ matrix.os }}
      php: ${{ matrix.php }}
      db-type: ${{ matrix.db-type }}
      db-version: ${{ matrix.db-version }}
      wp: ${{ matrix.wp }}
      new-version: ${{ inputs.new_version && inputs.new_version || '' }}
      multisite: ${{ matrix.multisite }}

  slack-notifications:
    name: Slack Notifications
    uses: WordPress/wordpress-develop/.github/workflows/slack-notifications.yml@trunk
    permissions:
      actions: read
      contents: read
    needs: [ upgrade-tests-wp-6x-mysql, upgrade-tests-wp-5x-php-7x-mysql, upgrade-tests-wp-5x-php-8x-mysql, upgrade-tests-wp-4x-php-7x-mysql, upgrade-tests-wp-4x-php-8x-mysql ]
    if: ${{ github.repository == 'WordPress/wordpress-develop' && github.event_name != 'pull_request' && always() }}
    with:
      calling_status: ${{ needs.test-with-mysql.result == 'success' && needs.test-with-mariadb.result == 'success' && 'success' || ( needs.test-with-mysql.result == 'cancelled' || needs.test-with-mariadb.result == 'cancelled' ) && 'cancelled' || 'failure' }}
    secrets:
      SLACK_GHA_SUCCESS_WEBHOOK: ${{ secrets.SLACK_GHA_SUCCESS_WEBHOOK }}
      SLACK_GHA_CANCELLED_WEBHOOK: ${{ secrets.SLACK_GHA_CANCELLED_WEBHOOK }}
      SLACK_GHA_FIXED_WEBHOOK: ${{ secrets.SLACK_GHA_FIXED_WEBHOOK }}
      SLACK_GHA_FAILURE_WEBHOOK: ${{ secrets.SLACK_GHA_FAILURE_WEBHOOK }}

  failed-workflow:
    name: Failed workflow tasks
    runs-on: ubuntu-latest
    permissions:
      actions: write
    needs: [ slack-notifications ]
    if: |
      always() &&
      github.repository == 'WordPress/wordpress-develop' &&
      github.event_name != 'pull_request' &&
      github.run_attempt < 2 &&
      (
        needs.upgrade-tests-wp-6x.result == 'cancelled' || needs.upgrade-tests-wp-6x.result == 'failure' ||
        needs.upgrade-tests-wp-5x-php-7x.result == 'cancelled' || needs.upgrade-tests-wp-5x-php-7x.result == 'failure' ||
        needs.upgrade-tests-wp-5x-php-8x.result == 'cancelled' || needs.upgrade-tests-wp-5x-php-8x.result == 'failure' ||
        needs.upgrade-tests-wp-4x-php-7x.result == 'cancelled' || needs.upgrade-tests-wp-4x-php-7x.result == 'failure' ||
        needs.upgrade-tests-wp-4x-php-8x.result == 'cancelled' || needs.upgrade-tests-wp-4x-php-8x.result == 'failure'
      )

    steps:
      - name: Dispatch workflow run
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          retries: 2
          retry-exempt-status-codes: 418
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'failed-workflow.yml',
              ref: 'trunk',
              inputs: {
                run_id: '${{ github.run_id }}'
              }
            });
